// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThangDV29_MiniProject_WebAPI.ApplicationDBContext;

namespace ThangDV29_MiniProject_WebAPI.Migrations
{
    [DbContext(typeof(MyApplicationDBContext))]
    [Migration("20220614095053_initdb")]
    partial class initdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Account", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAuthentication")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBLock")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            ID = new Guid("a68393ff-15fa-4136-85e2-71cdc505d8e8"),
                            BirthDay = new DateTime(1999, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreate = new DateTime(2022, 6, 14, 9, 50, 50, 0, DateTimeKind.Unspecified),
                            Email = "doanvanthang504@gmail.com",
                            FullName = "DOAN VAN THANG",
                            IsAuthentication = true,
                            IsBLock = false,
                            PasswordHash = "$2a$11$Gm8thijPpzN91gocsw4CWuAF7E8E7m2SDaz6f8Go.XI5UQ/TmI/OC",
                            Role = 0,
                            Username = "doanvanthang504"
                        },
                        new
                        {
                            ID = new Guid("2c273e26-c2dd-4956-8e13-7c25c2a1158b"),
                            BirthDay = new DateTime(1998, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreate = new DateTime(2022, 6, 14, 9, 50, 50, 0, DateTimeKind.Unspecified),
                            Email = "lethihoa99@gmail.com",
                            FullName = "LE THI HOA",
                            IsAuthentication = true,
                            IsBLock = false,
                            PasswordHash = "$2a$11$UHdHCIOthFp0T6/6TUP22uUv3LZDbku6vK/9jGgYdhS033zECmi1W",
                            Role = 1,
                            Username = "lethihoa99"
                        },
                        new
                        {
                            ID = new Guid("23e22ae9-c14a-4e5d-8bf0-e4734143ed41"),
                            BirthDay = new DateTime(1988, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreate = new DateTime(2022, 6, 14, 9, 50, 50, 0, DateTimeKind.Unspecified),
                            Email = "taolagiaovien@gmail.com",
                            FullName = "tao la giao vien",
                            IsAuthentication = true,
                            IsBLock = false,
                            PasswordHash = "$2a$11$ZN4Q/qgtpUkjTvDawVoD6e3PSO0QVjdGEQt3nNKpCwmxez/hrCIxi",
                            Role = 1,
                            Username = "giaovien"
                        },
                        new
                        {
                            ID = new Guid("e280d537-732c-465a-ab22-74d4cbb696c2"),
                            BirthDay = new DateTime(1988, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreate = new DateTime(2022, 6, 14, 9, 50, 51, 0, DateTimeKind.Unspecified),
                            Email = "taolagiaovien22@gmail.com",
                            FullName = "tao la giao vien 22",
                            IsAuthentication = true,
                            IsBLock = false,
                            PasswordHash = "$2a$11$Wzbq.tZjQB9kTzBedk71LedJHtufgcw7NBFHKyXT127cfjO9tkoLi",
                            Role = 1,
                            Username = "giaovien2"
                        },
                        new
                        {
                            ID = new Guid("9c7b60b6-44b6-4a6f-9c4b-a0ece4672421"),
                            BirthDay = new DateTime(2000, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreate = new DateTime(2022, 6, 14, 9, 50, 51, 0, DateTimeKind.Unspecified),
                            Email = "nguyenvananh123@gmail.com",
                            FullName = "NGUYEN VAN ANH",
                            IsAuthentication = false,
                            IsBLock = false,
                            PasswordHash = "$2a$11$gsJg8xBacEOlZzeBEwhvOuG76ZsYW1gHutdHDYp9nZQ7WfWr9r/HO",
                            Role = 2,
                            Username = "nguyenvananh123"
                        },
                        new
                        {
                            ID = new Guid("a277d8ae-df9e-4259-909b-a7c790b9389a"),
                            BirthDay = new DateTime(2000, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreate = new DateTime(2022, 6, 14, 9, 50, 51, 0, DateTimeKind.Unspecified),
                            Email = "duonganhhong98@gmail.com",
                            FullName = "DUONG ANH HONG",
                            IsAuthentication = false,
                            IsBLock = false,
                            PasswordHash = "$2a$11$JwD6gTtAjtopv1nkvy6LBO0qF3.WiidDqWB5caeTv3W0bkKMD6AU2",
                            Role = 2,
                            Username = "duonganhhong98"
                        },
                        new
                        {
                            ID = new Guid("a177d8ae-df9e-4259-909b-a7c790b9389a"),
                            BirthDay = new DateTime(2000, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreate = new DateTime(2022, 6, 14, 9, 50, 51, 0, DateTimeKind.Unspecified),
                            Email = "lekhanhhoa@gmail.com",
                            FullName = "Le Khanh Hoa",
                            IsAuthentication = false,
                            IsBLock = false,
                            PasswordHash = "$2a$11$iy8RBb2no71OlZB0FXjc1uSxitSWapyVbgeKUCY4I61nTzSntlJve",
                            Role = 2,
                            Username = "lekhanhhoa"
                        },
                        new
                        {
                            ID = new Guid("a377d8ae-df9e-4259-909b-a7c790b9389a"),
                            BirthDay = new DateTime(2000, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreate = new DateTime(2022, 6, 14, 9, 50, 52, 0, DateTimeKind.Unspecified),
                            Email = "bao123@gmail.com",
                            FullName = "Pham Tran Huy Bao",
                            IsAuthentication = false,
                            IsBLock = false,
                            PasswordHash = "$2a$11$2tsbAB76buChrpAWtQQCZePj8hybq08.afLy026q/k7erzQ/RAnv2",
                            Role = 2,
                            Username = "phamtranhuybao123"
                        },
                        new
                        {
                            ID = new Guid("a477d8ae-df9e-4259-909b-a7c790b9389a"),
                            BirthDay = new DateTime(2000, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreate = new DateTime(2022, 6, 14, 9, 50, 52, 0, DateTimeKind.Unspecified),
                            Email = "duyduyduy@gmail.com",
                            FullName = "Van Duy",
                            IsAuthentication = false,
                            IsBLock = false,
                            PasswordHash = "$2a$11$8xdB5b8Tfurz1UIDrPtPlOB6cqcdwkcRUzxSJcxgjNqDDnD/G3qnC",
                            Role = 2,
                            Username = "duyduyduy1"
                        });
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Answer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Answer");

                    b.HasData(
                        new
                        {
                            ID = new Guid("ce6882a5-7e2d-4ec0-85c8-c9fc96998da7"),
                            DescriptionAnswer = "tao khong biet",
                            ImageAnswer = "www.image1"
                        },
                        new
                        {
                            ID = new Guid("ec0983cf-316c-4a00-9ea0-9aa5e8a1b44f"),
                            DescriptionAnswer = "dung hoi tao",
                            ImageAnswer = "www.image2"
                        },
                        new
                        {
                            ID = new Guid("6687b5b9-a407-4f34-88af-ef10b58fffc9"),
                            DescriptionAnswer = "tao thua",
                            ImageAnswer = "www.image3"
                        },
                        new
                        {
                            ID = new Guid("8f5be11b-caf1-4a63-9121-0b8b3668fb5d"),
                            DescriptionAnswer = "di hoi thang khac di",
                            ImageAnswer = "www.image4"
                        },
                        new
                        {
                            ID = new Guid("2d9fa7e8-420f-45b9-99e4-031fa241d1b6"),
                            DescriptionAnswer = "de tra google",
                            ImageAnswer = "www.image5"
                        },
                        new
                        {
                            ID = new Guid("35c5e7a7-3176-42fc-8d1b-347809614b90"),
                            DescriptionAnswer = "thoi dep me di",
                            ImageAnswer = "www.image6"
                        },
                        new
                        {
                            ID = new Guid("2f084f72-0692-43ee-8b0f-15644fcef973"),
                            DescriptionAnswer = "chon cau a",
                            ImageAnswer = "www.image6"
                        },
                        new
                        {
                            ID = new Guid("f19beebe-16a5-492e-9197-2ed7ee51effc"),
                            DescriptionAnswer = "chon cau d",
                            ImageAnswer = "www.image6"
                        },
                        new
                        {
                            ID = new Guid("c3b8f3db-e1cb-4af4-b51d-fbe23c826e54"),
                            DescriptionAnswer = "aaaaaaaa",
                            ImageAnswer = "www.image6"
                        },
                        new
                        {
                            ID = new Guid("d10af90d-d41d-4b15-821a-9b928b3b7940"),
                            DescriptionAnswer = "bbbbbbb",
                            ImageAnswer = "www.image6"
                        },
                        new
                        {
                            ID = new Guid("44ef4b9f-217e-4477-9877-98e7fe9bdd6f"),
                            DescriptionAnswer = "ccccccccc",
                            ImageAnswer = "www.image6"
                        });
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Exam", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateExam")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameExam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimeExam")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Exam");

                    b.HasData(
                        new
                        {
                            ID = new Guid("b12cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            DateExam = new DateTime(2022, 6, 14, 16, 50, 52, 341, DateTimeKind.Local).AddTicks(3035),
                            NameExam = "De de vai lon",
                            TimeExam = 90
                        },
                        new
                        {
                            ID = new Guid("b22cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            DateExam = new DateTime(2022, 6, 14, 16, 50, 52, 341, DateTimeKind.Local).AddTicks(3431),
                            NameExam = "code 180 phut",
                            TimeExam = 180
                        },
                        new
                        {
                            ID = new Guid("b32cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            DateExam = new DateTime(2022, 6, 14, 16, 50, 52, 341, DateTimeKind.Local).AddTicks(3442),
                            NameExam = "code thoi dung xam lol",
                            TimeExam = 70
                        });
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.ExamQuestion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ExamID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Exam.Question");

                    b.HasData(
                        new
                        {
                            ID = new Guid("1d8351ab-82dd-436b-a699-cadcaa7dfbe0"),
                            ExamID = new Guid("b12cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            QuestionID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            TeacherID = new Guid("2c273e26-c2dd-4956-8e13-7c25c2a1158b")
                        },
                        new
                        {
                            ID = new Guid("28e12f28-3e99-40c7-abb0-400d20bc6d42"),
                            ExamID = new Guid("b12cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            QuestionID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b2d"),
                            TeacherID = new Guid("2c273e26-c2dd-4956-8e13-7c25c2a1158b")
                        },
                        new
                        {
                            ID = new Guid("dab62044-a562-411f-a29b-915457fb334b"),
                            ExamID = new Guid("b12cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            QuestionID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b3d"),
                            TeacherID = new Guid("2c273e26-c2dd-4956-8e13-7c25c2a1158b")
                        },
                        new
                        {
                            ID = new Guid("c34fd4f4-96e8-4fa4-9267-5d575931724d"),
                            ExamID = new Guid("b12cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            QuestionID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b4d"),
                            TeacherID = new Guid("2c273e26-c2dd-4956-8e13-7c25c2a1158b")
                        },
                        new
                        {
                            ID = new Guid("f1352baf-cbc3-4f8c-8bd8-ef291e3b391b"),
                            ExamID = new Guid("b12cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            QuestionID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b5d"),
                            TeacherID = new Guid("2c273e26-c2dd-4956-8e13-7c25c2a1158b")
                        },
                        new
                        {
                            ID = new Guid("9e9d3b27-9450-4b28-8ce2-b802fa45f734"),
                            ExamID = new Guid("b22cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            QuestionID = new Guid("b42cea50-b2e1-4467-91a0-7e96facc9b6d"),
                            TeacherID = new Guid("2c273e26-c2dd-4956-8e13-7c25c2a1158b")
                        },
                        new
                        {
                            ID = new Guid("9ab172d2-f2c0-485d-bc5d-2f666714e2e7"),
                            ExamID = new Guid("b22cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            QuestionID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b4d"),
                            TeacherID = new Guid("2c273e26-c2dd-4956-8e13-7c25c2a1158b")
                        },
                        new
                        {
                            ID = new Guid("4eb78c04-6841-4ccd-88ca-a243150d59ed"),
                            ExamID = new Guid("b32cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            QuestionID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b5d"),
                            TeacherID = new Guid("2c273e26-c2dd-4956-8e13-7c25c2a1158b")
                        });
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.HistoryExam", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnswerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateExam")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("AnswerID");

                    b.HasIndex("ExamID");

                    b.HasIndex("QuestionID");

                    b.ToTable("History.Exam");
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Question", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            ID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            ImageQuestion = "www.image1 ",
                            NameQuestion = "Con heo co may chan"
                        },
                        new
                        {
                            ID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b2d"),
                            ImageQuestion = "www.image2 ",
                            NameQuestion = "Con cho co may chan"
                        },
                        new
                        {
                            ID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b3d"),
                            ImageQuestion = "www.image3 ",
                            NameQuestion = "Con ga co may chan"
                        },
                        new
                        {
                            ID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b4d"),
                            ImageQuestion = "www.imag4 ",
                            NameQuestion = "Con gan co may chan"
                        },
                        new
                        {
                            ID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b5d"),
                            ImageQuestion = "www.image5 ",
                            NameQuestion = "Con chim co may chan"
                        },
                        new
                        {
                            ID = new Guid("b42cea50-b2e1-4467-91a0-7e96facc9b6d"),
                            ImageQuestion = "www.image6 ",
                            NameQuestion = "Con chim mau gi"
                        },
                        new
                        {
                            ID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b6d"),
                            ImageQuestion = "www.image6 ",
                            NameQuestion = "Con gi khong biet boi"
                        },
                        new
                        {
                            ID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b7d"),
                            ImageQuestion = "www.image6 ",
                            NameQuestion = "Ai dep chai nhat"
                        },
                        new
                        {
                            ID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b8d"),
                            ImageQuestion = "www.image6 ",
                            NameQuestion = "Bao cham bao nhieu diem"
                        },
                        new
                        {
                            ID = new Guid("b42cea50-b2e1-4467-91a0-7e96fccc9b9d"),
                            ImageQuestion = "www.image6 ",
                            NameQuestion = "Code tao co sach khong"
                        });
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Table.QuestionAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AnswerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ResultAnswer")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AnswerID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Question.Answer");
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Table.StudentExam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateExam")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ExamID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ExamID");

                    b.HasIndex("StudentID");

                    b.ToTable("Student_Exam");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateExam = new DateTime(2022, 6, 14, 9, 50, 52, 343, DateTimeKind.Utc).AddTicks(820),
                            ExamID = new Guid("b12cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            Score = 7.7999999999999998,
                            Status = true,
                            StudentID = new Guid("9c7b60b6-44b6-4a6f-9c4b-a0ece4672421")
                        },
                        new
                        {
                            ID = 2,
                            DateExam = new DateTime(2022, 6, 14, 9, 50, 52, 343, DateTimeKind.Utc).AddTicks(2528),
                            ExamID = new Guid("b22cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            Score = 9.5,
                            Status = true,
                            StudentID = new Guid("a277d8ae-df9e-4259-909b-a7c790b9389a")
                        },
                        new
                        {
                            ID = 3,
                            DateExam = new DateTime(2022, 6, 14, 9, 50, 52, 343, DateTimeKind.Utc).AddTicks(2539),
                            ExamID = new Guid("b32cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            Score = 4.0,
                            Status = false,
                            StudentID = new Guid("a177d8ae-df9e-4259-909b-a7c790b9389a")
                        },
                        new
                        {
                            ID = 4,
                            DateExam = new DateTime(2022, 6, 14, 9, 50, 52, 343, DateTimeKind.Utc).AddTicks(2546),
                            ExamID = new Guid("b12cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            Score = 8.5,
                            Status = true,
                            StudentID = new Guid("a377d8ae-df9e-4259-909b-a7c790b9389a")
                        },
                        new
                        {
                            ID = 5,
                            DateExam = new DateTime(2022, 6, 14, 9, 50, 52, 343, DateTimeKind.Utc).AddTicks(2552),
                            ExamID = new Guid("b22cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            Score = 6.0,
                            Status = true,
                            StudentID = new Guid("a477d8ae-df9e-4259-909b-a7c790b9389a")
                        },
                        new
                        {
                            ID = 6,
                            DateExam = new DateTime(2022, 6, 14, 9, 50, 52, 343, DateTimeKind.Utc).AddTicks(2562),
                            ExamID = new Guid("b32cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            Score = 6.7000000000000002,
                            Status = true,
                            StudentID = new Guid("a377d8ae-df9e-4259-909b-a7c790b9389a")
                        },
                        new
                        {
                            ID = 7,
                            DateExam = new DateTime(2022, 6, 14, 9, 50, 52, 343, DateTimeKind.Utc).AddTicks(2567),
                            ExamID = new Guid("b22cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            Score = 9.0999999999999996,
                            Status = true,
                            StudentID = new Guid("a177d8ae-df9e-4259-909b-a7c790b9389a")
                        },
                        new
                        {
                            ID = 8,
                            DateExam = new DateTime(2022, 6, 14, 9, 50, 52, 343, DateTimeKind.Utc).AddTicks(2572),
                            ExamID = new Guid("b12cea50-b2e1-4467-91a0-7e96fccc9b1d"),
                            Score = 8.6999999999999993,
                            Status = true,
                            StudentID = new Guid("a277d8ae-df9e-4259-909b-a7c790b9389a")
                        });
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.ExamQuestion", b =>
                {
                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Exam", "Exams")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamID")
                        .HasConstraintName("FK_Exam.Question_Exam  ")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Question", "Questions")
                        .WithMany("QuestionExams")
                        .HasForeignKey("QuestionID")
                        .HasConstraintName("FK_Exam.Question_Question")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Account", "Teacher")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("TeacherID")
                        .HasConstraintName("FK_Exam.Question_Teacher")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exams");

                    b.Navigation("Questions");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.HistoryExam", b =>
                {
                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Account", "Accounts")
                        .WithMany("HistoryExams")
                        .HasForeignKey("AccountID")
                        .HasConstraintName("FK_History.Exam_Account")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Answer", "Answers")
                        .WithMany("HistoryExams")
                        .HasForeignKey("AnswerID")
                        .HasConstraintName("FK_History.Exam_Answer")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Exam", "Exams")
                        .WithMany("HistoryExams")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Question", "Questions")
                        .WithMany("HistoryExams")
                        .HasForeignKey("QuestionID")
                        .HasConstraintName("FK_History.Exam_Question")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("Answers");

                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Table.QuestionAnswer", b =>
                {
                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Answer", "Answers")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("AnswerID")
                        .HasConstraintName("FK_Questions.Answer_Answer  ")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Question", "Questions")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionID")
                        .HasConstraintName("FK_Questions.Answer_Question")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Answers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Table.StudentExam", b =>
                {
                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Exam", "Exams")
                        .WithMany("StudentExams")
                        .HasForeignKey("ExamID")
                        .HasConstraintName("FK_Student_Exam_Exam")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ThangDV29_MiniProject_WebAPI.Models.Account", "Students")
                        .WithMany("StudentExams")
                        .HasForeignKey("StudentID")
                        .HasConstraintName("FK_Student_Exam_Student")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Exams");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Account", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("HistoryExams");

                    b.Navigation("StudentExams");
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Answer", b =>
                {
                    b.Navigation("HistoryExams");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("HistoryExams");

                    b.Navigation("StudentExams");
                });

            modelBuilder.Entity("ThangDV29_MiniProject_WebAPI.Models.Question", b =>
                {
                    b.Navigation("HistoryExams");

                    b.Navigation("QuestionAnswers");

                    b.Navigation("QuestionExams");
                });
#pragma warning restore 612, 618
        }
    }
}
